const { EOL } = require("os");
const { add, explode, split, addList, magnitude } = require("./18");

describe("add", () => {
  test.each([
    ["[1,2]", "[[3,4],5]", "[[1,2],[[3,4],5]]"],
    ["1", "2", "[1,2]"],
  ])("basic add(%s, %s)", (a, b, expected) => {
    a = JSON.parse(a);
    b = JSON.parse(b);
    const result = add(a, b);
    expected = JSON.parse(expected);
    expect(result).toStrictEqual(expected);
  });

  test.each([
    [
      "[[[[4,3],4],4],[7,[[8,4],9]]]",
      "[1,1]",
      "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]",
    ],
    [
      "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
      "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
      "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
    ],
    [
      "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
      "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
      "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
    ],
  ])("complicated add(%s, %s)", (a, b, expected) => {
    a = JSON.parse(a);
    b = JSON.parse(b);
    var result = add(a, b);
    result = JSON.stringify(result);
    expect(result).toStrictEqual(expected);
  });

  test.each([
    [
      `[1,1]
       [2,2]
       [3,3]
       [4,4]`,
      "[[[[1,1],[2,2]],[3,3]],[4,4]]",
    ],
    [
      `[1,1]
       [2,2]
       [3,3]
       [4,4]
       [5,5]`,
      "[[[[3,0],[5,3]],[4,4]],[5,5]]",
    ],
    [
      `[1,1]
       [2,2]
       [3,3]
       [4,4]
       [5,5]
       [6,6]`,
      "[[[[5,0],[7,4]],[5,5]],[6,6]]",
    ],
    [
      `[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
      [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
      [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
      [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
      [7,[5,[[3,8],[1,4]]]]
      [[2,[2,2]],[8,[8,1]]]
      [2,9]
      [1,[[[9,3],9],[[9,0],[0,7]]]]
      [[[5,[7,4]],7],1]
      [[[[4,2],2],6],[8,7]]`,
      "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]",
    ],
  ])("list add(%s)", (a, expected) => {
    const result = addList(a.split(EOL).map((c) => JSON.parse(c)));
    expected = JSON.parse(expected);
    expect(result).toStrictEqual(expected);
  });
});

describe("explode", () => {
  test.each([
    ["[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]"],
    ["[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]"],
    ["[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]"],
    [
      "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]",
      "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]",
    ],
    ["[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"],
    [
      "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]",
      "[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]",
    ],
    [
      "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]",
      "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,0],[[9,3],[8,8]]]]]",
    ],
  ])("explode(%s, %s)", (a, expected) => {
    a = JSON.parse(a);
    var result = explode(a);
    result = JSON.stringify(result);
    expect(result).toStrictEqual(expected);
  });
});

describe("split", () => {
  test.each([
    [10, "[5,5]"],
    [11, "[5,6]"],
    [12, "[6,6]"],
  ])("simple split(%d, %s)", (a, expected) => {
    const result = split(a);
    const ex = JSON.parse(expected);
    expect(result).toStrictEqual(ex);
  });

  test.each([
    ["[10,1]", "[[5,5],1]"],
    ["[10,10]", "[[5,5],10]"],
  ])("complex split(%s, %s)", (a, expected) => {
    a = JSON.parse(a);
    var result = split(a);
    result = JSON.stringify(result);
    expect(result).toStrictEqual(expected);
  });
});

describe("magnitude", () => {
  test.each([
    ["[9,1]", 29],
    ["[1, 9]", 21],
    ["[[9,1],[1,9]]", 129],
    ["[[1,2],[[3,4],5]]", 143],
    ["[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384],
    ["[[[[1,1],[2,2]],[3,3]],[4,4]]", 445],
    ["[[[[3,0],[5,3]],[4,4]],[5,5]]", 791],
    ["[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137],
    ["[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488],
  ])("calculate magnitude(%s)", (a, expected) => {
    a = JSON.parse(a);
    const result = magnitude(a);
    expect(result).toStrictEqual(expected);
  });
});
